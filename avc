#!/usr/bin/env bash
#
# avc - aggregated vcs
#
# begin - auto usage contents
## usage: $PNAME <action> PATHS
## agreegated vcs ACTIONs:
## 
##    st/status         - status in each dir
##    di/diff           - diff on
##    rm/remove         - remove files
##    ci/commit/checkin - commit files
##    up/update (-f/--fetch) - update workspace (and pull if possible)
##    overall_status    - show summary information (path, type, branch, size, modified & unknown files)
## 
## avc management:
##    checkout SPECFILE FOLDER
##                      - creates checkout described by SPECFILE to
##                        specified FOLDER
##    autoinit - create initial configuration by digging current
##               folder
## options:
##   -n | --dry-run     - just print commands, don't execute anything
##   -h | --help | help - print this help message
##   -c FILE | --config-spec FILE 
##                      - set new config specfile when updating
##   -f | --fetch | --pull - fetch new changes before updating
##   -m MSG | --message MSG 
##                      - commit message (for commit action)
# end - auto usage contents

#
# AVC CHECKOUT
#   Is simple operation that invokes just plain (pull/clone/fetch) and 
#   checkout(unarchive) of workspace into folders.
#   Repetitive checkout will (changed-or-not specfile) will update
#   workspace (possibly incomplete) to state in specfile.
#
#   CHUNKS that are recognized as MODIFIED, i,e don't match REF
#   known to AVC will be skipped as DIRTY.
#   
# AVC UPDATE/REBASE
#   Essentially the same as checkout, but a REBASE operation is attempted
#   which is equal to
#     git fetch && git rebase origin/BRANCH  -- if REF is branch and has origin
#         in case of conflict, CHUNK will be left in unclean state and it have
#         to be resolved manually using git command in CHUNK folder
#     mtn pull && mtn up  -- 
#         in case of conflict, CHUNK will be left unchanged and
#         user have to clean-up copy and/or resolve conflict using mtn
#     svn up (and/or switch)
#         in case of conflict, CHUNK will be left svn conflicted state and
#         user have to clean-up copy and/or resolve conflict using svn
#         
#

#
# avc specfile specification
#
# AVC specfile is built from one-line chunk-property-value triplets.
# empty lines are ignored, lines beginning with # are comments.
#
# AVC operates on CHUNKS whose properties are defined in specfile.
# Each CHUNK is identified, by it's relative path in workspace.
# Workspace is built-up from all CHUNKS that has enough definition
# to be used for particural command.
#
# When '*' (wildcard) is used as chunk name, then it doesn't constitute
# a chunk but property that matches all chunks. Pattern '*' in property
# value is replaced with matched CHUNK name.
#
# For, example, for specfile:
#   bar ref feature-new-ui
#   foo ref foo-1.3
#   spam ref spam-1.4.1.1
#   * url git+ssh://somehost/*
#   * git.reference_repository /var/cache/git-repos-somehost/*
#
# Will clone all bar from git+ssh://somehost/bar, and so on.
#

#
# 
#
# For checkout, minimal set of properties is 'ref' and 'url'.
#
# CHUNK properties
#
#  ref  - a VCS specific "selector" of revision to
#         be checked-out or followed-by (when updating and/or
#         rebasing).
#         git: branch,tag,commit-sha
#         svn: path-relative-to-baseurl
#         mtn: selector (h:..., t:...)
#
#  url  - a VCS specific URL of repository from which
#         AVC shall checkout/and/or update workspace
#         git: git+ssh://... , git://...
#         svn: svn+https://... svn://...
#         mtn: mtn+ssh://...   mtn://...
#         link: link:symlink path
#
# GIT SPECIFIC options
#
#     git.reference_repository PARAM
#         implies --reference PARAM when cloning repository
#
# MONOTONE SPECIFICS
#
#     mtn.db
#         uses this monotone db instead of automatically created for each chunk
#

#
# avc specfile example
#
#
# *      ref    feature/foobar
# cboom	 ref	branches/goo
# kuwaka ref	trunk
# boost  ref    boost-1.4.6
# 
# boost	url	git+ssh://git@git.foo.org/boost
# cboom	url	svn+https://svn.foo.org/svn/repo/cboom
#       
# will checkout
#  cboom  -> svn+https://svn.foo.org/svn/repo/cboom/branches/foo
#  kuwaka -> svn+https://svn.foo.org/svn/repo/kuwaka/trunk
#  boost  -> git+ssh://git@git.foo.org/boost && checkout boost-1.4.6
#
# * ref FOO -> will select reference FOO if exists in all chunks, else
#             it will select next version specified in specfile
#
# * git.reference_repository /var/cache/repos/*.git
#           -> when cloning repo, will always use reference repository
#              with alternate storage
#

#
# FUTURE DIRECTIONS
# 
# INTERACTIVE COOL COMMIT
#
# $EDITOR executed with following
#
#   --
#   ## avc:mofified
#   ## enter changelog entries below group of files to commit them
#   ## remove file to skip commit; empty message aborts commit
#   M foo/a.c
#   M foo/b.c
#   M foo/Makefile
#   M bar/main.c
#   M bar/Makefile
#   A bar/NEWS.txt
#
#   ## unknown files
#   # (just change them to A them and/or add them together with those modified)
#   ? bar/plugin.c
#   ? foo/build-howto.txt
#
#   ## avc:end
#   ## patch for reference (your-editor will most likely complete words
#   ## for commit message)
# ..diff a/foo/a.c b/foo/a.c.
#   +++ a/foo/a.c 
#   --- a/foo/a.c.
#   ...
#   ... (whole patch is rendered here for reference)
#
# WILDCARD REFERENCE
#
#  * url git+ssh://foo.org/vendor/*
#    for WILDCARD patterns, wildcard is replaced with match when value
#    is taken for use.
#    above sets URL pattern for EACH chunk that is defined elsewhere 
#    in specfile.

# ARCHIVE SPECIFICS
#
#   remote_archive
#     3rdparty/unittest++ remote.archive https://downloads.sf.net/unittest++/files/unittest++-1.3.zip#
#

# CUSTOM OPTIONS
#
#  custom.checkout
#     example:
#       3rdparty/foo-1.2.3 custom.checkout ln -s /var/mnt/builds/foo-1.2.3 foo-1.2.3
#  custom.update
#     example:
#       3rdparty/foo-1.2.3 custom.checkout ln -s /var/mnt/builds/foo-1.2.3 foo-1.2.3

#set -x

#DRY_RUN=1
#QUIET=1

#
# common utils
#

run_with_prefix()
{
    local prefix="$1"
    shift
    "$@" 2>&1 | awk -v prefix="$prefix" '{ printf("%s%s\n",prefix,$0);}'
}

#
# git
#

git_choose_existing_ref()
{
    local workspace="$1"
    shift
    local refs="$*"
    
    local tmpfile=/tmp/.avc-git_choose_existing_ref-$USER-$$
    git-ls-remote "$workspace" > $tmpfile
    local found_ref=""
    for ref in $refs ; do
        if egrep -q "refs/heads/$ref\$" $tmpfile ; then
            found_ref="$ref"
            break
        fi
        if egrep -q "refs/remotes/origin/$ref\$" $tmpfile ; then
            found_ref="$ref"
            break
        fi            
        if egrep -q "refs/tags/$ref\$" $tmpfile ; then
            found_ref="$ref"
            break
        fi
    done
    rm -rf $tmpfile
    echo "$found_ref"    
}

remove_git_plus_from_url()
{
    echo "$1" | sed -e 'sX^git+XX'
}

git_clone()
{
    local target_folder="$1"
    local clone_url="$2"
    
    clone_url="$(remove_git_plus_from_url $clone_url)"
    local reference_repo="$(chunk_prop "$avc_root_specfile" "$target_folder" git.reference_repository)"
    local git_clone_options=""
    
    if [ -n "$reference_repo" ] ; then
        git_clone_options="$git_clone_options --reference $reference_repo"
    fi
    
    run_in . git clone -n $git_clone_options "$clone_url" "$target_folder"
}

git_checkout()
{
    local target_folder="$1"
    local clone_url="$2"
    shift
    shift
    
    local refs="$*"
    
    
    if [ ! -d "$target_folder" ] ; then
        git_clone "$target_folder" "$clone_url"
    else
        run_in $target_folder git fetch
    fi
    
    if [ -d "$target_folder" ] ; then
        local ref="$(git_choose_existing_ref $target_folder $refs)"
    else
        local ref="$(git_choose_existing_ref $clone_url $refs)"
    fi
    if [ -z "$ref" ] ; then
        echo "dews-avc: failed to checkout $target_folder; none following references exists in repo: $refs" >&2
        return 1
    fi
    run_in "$target_folder" git checkout $ref
}

git_is_branch()
{
    git branch -a | grep -q "remotes/$1"
}

git_update()
{
    local target_folder="$1"
    local clone_url="$2"
    shift
    shift
    
    local refs="$*"
    if [ ! -d "$target_folder" ] ; then
        git_clone "$target_folder" "$clone_url"
    else
        if [ -n "$enable_fetch_while_update" ] ; then
            run_in $target_folder git fetch
        fi
    fi
    if [ -d "$target_folder" ] ; then
        local ref="$(git_choose_existing_ref $target_folder $refs)"
    else
        local ref="$(git_choose_existing_ref $clone_url $refs)"
    fi
    if [ -z "$ref" ] ; then
        echo "dews-avc: failed to checkout $target_folder; none following references exists in repo: $refs" >&2
        return 1
    fi
    
    if QUIET=1 run_in "$target_folder" git_is_branch origin/$ref ; then 
        if ! run_in "$target_folder" git merge --ff origin/$ref ; then
            echo "avc: $target_folder, unable to update/fast-forward from origin/$ref -> $ref; please merge or rebase manually"
            return 1
        fi
    fi        
    
    run_in "$target_folder" git checkout $ref
}


git_search_worskpaces()
{
    find . -name ".git" | xargs --no-run-if-empty --max-args=1 dirname | while read dir ; do
        local url=`QUIET=1 run_in $dir git config --get remote.origin.url`
        local ref=`QUIET=1 run_in $dir git describe --always --dirty 2>/dev/null`
        
        echo "$dir ref $ref"
        if [ -n "$url" ] ; then 
            echo "$dir url $url"
        else
            echo "# $dir url <remote.origin.url_not_set>"    
        fi
    done
}

git_unknown_files() 
{
    run_in $1 git status --porcelain | egrep '^\?\?' | wc -l
}

git_modified_elements() 
{
    run_in $1 git status --porcelain | egrep -v '^\?\?' | wc -l
}

git_content_tag()
{
    local branch=`run_in $1 git branch`
    if echo "$branch" | grep -qF "(no branch)" ; then
        run_in "$1" git describe --always --dirty 2>/dev/null
    else
        echo "$branch" | awk '/\*/ {print $2;}'
    fi
}

git_status()
{
    local workspace_dir="$1"
    shift
    
    run_in "$workspace_dir" git status -s  "$@" | awk -v root=$workspace_dir '{printf("%s %s/%s\n", $1, root, $2)}'
}

git_workspace_diff()
{
    local workspace_dir="$1"
    shift
    
    run_in "$workspace_dir" git diff --src-prefix=$workspace_dir/ --dst-prefix=$workspace_dir/ "$@" | cat  
}

git_remove()
{
    local workspace_dir="$1"
    shift
    
    run_in "$workspace_dir" git rm "$@" 
}

git_add()
{
    local workspace_dir="$1"
    shift
    
    run_in "$workspace_dir" git add "$@" 
}

git_commit()
     # commit SPECIFIED or ALL changes into workspace
     # note, we're changing default behaviour of git if not paths
     # were specified to comply with MOST VCS-es, which default 
     # bahaviour is to commit all files modified in workspace
     # are selected to next commit
{
    local workspace_dir="$1"
    shift
    local git_commit_options=""
    if [ -n "$commit_message" ] ; then
        git_commit_options="-m \"$commit_message\""
    fi
    if [ -z "$*" ] ; then
        git_commit_options="$git_commit_options -a"
    fi
    run_in "$workspace_dir" git commit $git_commit_options "$@"
}

git_ignore_file()
{
    local workspace="$1"
    shift
    local gitignore_file="$workspace/.gitignore"
    touch "$gitignore_file"
    
    for pattern in "$@" ; do
        pattern_rel="$(relpath $workspace "$pattern")"
        if ! grep -Fq "$pattern_rel" "$gitignore_file" ; then
            echo "avc: adding $pattern_rel to $gitignore_file" >&2 
            echo "$pattern_rel" >> "$gitignore_file"
        fi
    done
}

git_push()
{
    run_in "$1" git push
}
#
# mtn
#

mtn_checkout()
{
    local target_folder="$1"
    local clone_url="$2"
    local ref="$3"
    
    local db_name="$(chunk_prop "$avc_root_specfile" "$target_folder" mtn.db)"
    if [ -z "$db_name" ] ; then
        db_name="$(dirname $target_folder)/.$(basename $target_folder).mtn"
    fi
    
    if [ ! -f "$db_name" ] ; then
        run_in . mtn db init -d "$db_name"
    fi
    run_in . mtn pull -d "$db_name" "$clone_url"
    
    if [ ! -f "$target_folder/_MTN" ] ; then
        run_in . mtn -d "$db_name" checkout --revision="$ref" "$target_folder"
    else
        run_in "$target_folder" mtn update --revision=$ref
    fi
}

mtn_describe()
{
    local brid="$(mtn automate get_base_revision_id)"
    echo $brid
    
    
    return 0
    
    # to get branch: 
    #   mtn automate get_option branch
    # in future maybe be more amitious and detect tag
    #local tag="$(mtn automate certs brid | mtn_get_stanza_value name=tag value)"
    #if [ -n "$tag" ] ; then
    #    echo "t:$tag"
    #else
    #    local branch="$(mtn automate certs brid | mtn_get_stanza_value name=branch value)"
    #    if [
    #    echo "h:$branch"
    #fi
}
mtn_get_workspace_url()
{
    local server="$(mtn list vars | awk '/database: default-server/ {print $3}')"
    
    if [ -n "$server" ] ; then
        local pattern="$(mtn list vars | awk -v server="$url" '/server-include: / { if( $2 == server ) { print $3} }')"
        if [ -z "$pattern" ] ; then
            pattern="*"
        fi
        if [[ "$server" = ssh://* ]] ; then
            server="mtn+$server"
        fi
        echo "$server?$pattern"
    fi
}
mtn_search_workspaces()
{
    find . -name "_MTN" | xargs --no-run-if-empty  --max-args=1 dirname | while read dir ; do
        local url=`QUIET=1 run_in $dir mtn_get_workspace_url`
        local ref=`QUIET=1 run_in $dir mtn_describe`
        
        echo "$dir ref $ref"
        if [ -n "$url" ] ; then 
            echo "$dir url $url"
        else
            echo "# $dir url <remote.origin.url_not_set>"    
        fi
    done
}

mtn_unknown_files()
{
    run_in $1 mtn ls unknown | wc -l
}

mtn_modified_elements()
{
    run_in $1 mtn st | egrep "^ +(dropped|added|patched|renamed) " | wc -l
}

mtn_content_tag()
{
    run_in $1 cat _MTN/options | tr -d '"' | awk '/branch/ {print $2; }'
}
mtn_status()
{
    local prefix="${1}/"
    [ "$1" = . ] && prefix=
    run_in $1 mtn automate inventory | awk -v prefix=$prefix '
        function unqote(str) {
            gsub(/"/,"",str);
            return str;
        }
        /^[ \t]*path/ {
             path=unqote($2);
        }
        /^[ \t]*old_path/ {
             old_path=unqote($2);
        }
        /^[ \t]*status/ {
             status=unqote($2);
             #printf("-- %s -> %s\n", path, status);
             if( !path ) { next }
             # TBD, what is common sense when showind rename target&source ???
             # in current state we show only R for target
             if( index(status, "rename_target") != 0 ) {
                 printf("R  %s%s <- %s\n", prefix, path, old_path);
                 path="";
             } else             
             if( index(status, "dropped") != 0 ) {
                 printf("D  %s%s\n", prefix, path);
                 path="";
             } else
             if( index(status, "added") != 0 ) {
                 printf("A  %s%s\n", prefix, path);
                 path="";
             } else
             if( status == "unknown" ) {
                 printf("?? %s%s\n", prefix, path);
                 path="";
             }
        }
        /^[ \t]*changes .*/ {
             changes=unqote($2);
             if( !path ) { next }
             if( changes == "content" ) {
                 printf("M  %s%s\n",prefix, path);
                 path="";
             }
        }

    '
}

mtn_basic_glob_to_regexp()
{
    sed -e 's/\./\\./g' \
        -e 's/*/.*/g' \
        -e 's/?/.?/g'
}
mtn_ignore_file()
{
    local workspace="$1"
    shift
    local mtn_ignore_file="$workspace/.mtn-ignore"
    touch "$mtn_ignore_file"
    
    for pattern in "$@" ; do
        pattern_rel="$(relpath $workspace "$pattern" | mtn_basic_glob_to_regexp)"
        if ! grep -Fq "$pattern_rel" "$mtn_ignore_file" ; then
            echo "avc: adding $pattern_rel to $mtn_ignore_file" >&2 
            echo "$pattern_rel" >> "$mtn_ignore_file"
        fi
    done
}

is_this_mtn()
{
    if [ -d _MTN ] ; then
        return 0
    else
        return 1
    fi
}

#
# subversion
#

svn_find_workspaces()
{
    # not supported
    #return 0
    find . -name ".svn" | while read dot_svn_dir 
    do
        workspace_dir=`dirname $dot_svn_dir`
        if [ ! -d "$workspace_dir/../.svn" ] ; then
            local url="$(run_in "$workspace_dir" svn info | awk '/^URL/ {printf $2; }')"
            echo "$workspace_dir ref HEAD"
            echo "$workspace_dir url $url"
        fi
    done
}

svn_unknown_files() 
{
    run_in $1 svn status | egrep '^\?' | wc -l
}

svn_modified_elements() 
{
    run_in $1 svn status | egrep -v '^\?' | wc -l
}

svn_content_tag()
{
    # ok this is fucked up beyond all recognition!
    # 
    if run_in $1 svn info > /dev/null 2>&1 ; then
        local url=`run_in $1 svn info | awk '/^URL/ {printf $2; }'`
        local repo=`run_in $1 svn info | awk '/^Repository Root/ {printf $3; }'`
        local rev=`run_in $1 svn info | awk '/^Revision/ {printf $2; }'`
        
        local tag=`echo $url | sed -e "s#$repo##"`
        echo "$tag@$rev"
    else
        echo "unknown"
    fi
}

#
# link
# link, is a chunk that has entry in form:
#  chunk url link:relative_path_in_avc_root
#

link_checkout()
{
    local target_folder="$1"
    local clone_url="$2"
    shift
    shift
    local refs="$*"
    
    local clone_path="$(echo "$clone_url" | sed -e 'sX^link:XX')"
    
    echo "avc: ln -fs $clone_path $target_folder"    
    run_in "." ln -fs "$clone_path" "$target_folder"
}

link_update()
{
    link_checkout "$@"
}

#
# common
#

run_in()
{
    local f=$1
    shift
    ( 
        if [ -z "$QUIET" ] ; then
            echo "avc: "$@" (in $f)" >&2
        fi
        if [ -n "$DRY_RUN" ] ; then
            exit 0
        fi
        cd $f
        eval "$@"
        exit $? 
    ) 
    return $?
}

potentially_replace()
{
    local file_to_save="$1"
    if [ -f "$file_to_save" ]
    then
#        if ! diff -q "$file_to_save" "$1" ; then
#            return
#        fi
        echo "$PNAME: file '$file_to_save' already exists. replacing "         
    fi
    
    cat > "$file_to_save"    
}

#
# avc beef
#

autoinit()
{
    (
        git_search_worskpaces
        mtn_search_workspaces
        svn_find_workspaces        
    ) | potentially_replace "$avc_root_specfile_name"
        
    echo "found workspaces: "
    chunks_all "$avc_root_specfile_name"
}
#
# avc SCM multiplex
#

workspace_type()
{
    local workspace_dir="$1"
    if [ -d "$workspace_dir/_MTN" ] ; then 
        echo "mtn"
    elif [ -d "$workspace_dir/.svn" ] ; then
        echo "svn"
    elif [ -e "$workspace_dir/.git" ] ; then
        echo "git"
    fi
}

available()
{
    if type $1 >/dev/null 2>&1 ; then
        return 0
    else
        return 1
    fi
}

# trampoline METHOD WORKSPACE ...
#
#  checks type of WORKSPACE and then executes
#  type_METHOD WORKSPACE ...
#
trampoline()
{
    local method=$1
    shift    
    local type=`workspace_type $1`    
    if [ -n "$type" ] ; then
        if ! available $type ; then
            echo "n/a"
        else
            ${type}_${method} "$@"
        fi
    else
        echo "$PNAME: unable to execute '$method' on folder '$1"
        exit 1
    fi
}

checkout_url()
{
    local target_folder="$1"
    local url="$2"
    local ref="$3"
    url_trampoline "$url" checkout "$target_folder" "$url" "$ref"
}

update_url()
{
    local target_folder="$1"
    local url="$2"
    local ref="$3"
    url_trampoline "$url" update "$target_folder" "$url"  "$ref"
}


url_trampoline()
{
    local url="$1"
    local method="$2"
    shift
    shift
    
    if   [[ "$url" = git* ]] ; then
        git_$method "$@"
    elif [[ "$url" = svn* ]] ; then
        svn_$method "$@"
    elif [[ "$url" = mtn* ]] ; then
        mtn_$method "$@"
    elif [[ "$url" = link* ]] ; then
        link_$method "$@"
    else
        echo "avc: not supported URL scheme: '$url'"
        return 1
    fi
}

remove()
{
    trampoline remove "$@"
}

commit()
{
    trampoline commit "$@"
}
status()
{
    trampoline status "$@"
}

workspace_diff()
{
    trampoline workspace_diff "$@"
}

# trampoline methods
modified_elements()
{
    trampoline modified_elements "$@"
}

content_tag()
{
    trampoline content_tag "$@"
}

unknown_files()
{
    trampoline unknown_files "$@"
}

# generic methods
directory_size()
{
    echo 0
    #du -sh $1 | awk '{print $1;}'
}

latest_modified_file()
{
    find $1 | xargs -d '\n' ls -ld --time-style=+%s | sort -nk6 | tail -n1 |awk '{print $7;}'
}

abspath()
{
    
    if test -z "$1" 
    then
        return
    fi
    
    if [ -d "$1" ] ; then
        (
            cd $1 
            pwd
        )
    else
        local dir="$(dirname "$1")"
        local name="$(basename "$1")"
        (
            cd $dir
            echo "`pwd`/$name"
        )
    fi
    
}

relpath()
{
    local root_path="$1"
    local target_path="$2"
    
    echo "$target_path" | sed -e "s|^${root_path}/||"
}

find_avc_root_rel()
{
    local potential_avc_root=.
    while [ "$potential_avc_root" != "/" ]
    do
        if [ -f "$potential_avc_root/avc.conf" ]
        then
            echo "$potential_avc_root"
            return 0
        fi
        if [ -f "$potential_avc_root/$avc_root_specfile_name" ]
        then
            echo "$potential_avc_root"
            return 0
        fi
        local potential_avc_root_abs="$(abspath $potential_avc_root)"
        if [ "$potential_avc_root_abs" = "/" ] ; then
            break
        fi
        potential_avc_root="$potential_avc_root/.."      
    done
    return 1
}

readonly avc_root_specfile_name=".avc.specfile.txt"

ensure_avc_workspace_variables_setup()
{
    if [ -z "$avc_root_rel" ] ; then 
        avc_root_rel="$(find_avc_root_rel)"
        if [ -z "$avc_root_rel" ] ; then
            echo "$PNAME: unable to find 'avc.conf' up in directory structure"
            exit 1
        fi
        avc_root_abs="$(abspath $avc_root_rel)"
        avc_root_specfile="${avc_root_abs}/$avc_root_specfile_name"
        avc_invocation_folder="$(pwd)"
    fi
}

find_avc_root()
{
    if [ -z "$avc_root_abs" ] ; then
        if [ -z "$avc_root_rel" ] ; then    
            local avc_root_rel="$(find_avc_root_rel)"
        fi
        local "$(abspath $avc_root_rel)"
    fi
    if [ -z "$avc_root_abs" ] ; then
        return 1
    fi
    echo "$avc_root_abs"
}
find_avc_root_assert()
{
    if ! find_avc_root
    then
        echo "$PNAME: unable to find 'avc.conf' up in directory structure"
        exit 1
    fi    
}

   
all_workspaces_rel()
{
    ensure_avc_workspace_variables_setup
    
    if [ -f "$avc_root_specfile" ] ; then
        chunks_all "$avc_root_specfile"
    else
        # legacy
        cat "$avc_root/avc.conf"
    fi
}

all_workspaces_abs()
{
    for workspace in `all_workspaces_rel` ; do
        abspath "$avc_root_abs/$workspace"
    done
}

for_all_workspace()
        # this is some shit, to be removed
{
    ensure_avc_workspace_variables_setup
    cd "$avc_root_abs"
    for workspace_dir in `all_workspaces_rel`
    do
        "$@" "$workspace_dir"
    done
}

match_paths()
(
    local all_workspaces_abs="$(all_workspaces_abs)"
    for path in "$@" ; do
        local path_abs="$(abspath "$path")"
        
        for workspace_dir_abs in $all_workspaces_abs ; do
            if echo "$path_abs" | egrep -q "^$workspace_dir_abs(/|\$)" ; then
                echo "$workspace_dir_abs $path_abs"
            fi
        done
    done
)

match_paths_oneline()
{
    match_paths "$@" | (
        local last_workspace=""
        local paths=""
        while read workspace path ; do
            if [ "$workspace" = "$last_workspace" ] ; then
                paths="$paths $path"
            else
                if [ -n "$paths" ] ; then
                    echo "$last_workspace $paths"
                fi
                paths="$path"
            fi
            last_workspace="$workspace"
        done
        if [ -n "$paths" ] ; then
            echo "$last_workspace $paths"
        fi
    )
}

dispatch_to_workspaces()
{
    
    ensure_avc_workspace_variables_setup
    local subaction="$1"
    shift
    
    if [ -z "$1" ] ; then
        for_all_workspace $subaction
        return
    fi
    
    match_paths_oneline "$@" | {
        cd "$avc_root_abs"
        while read workspace paths 
        do
            local workspace_rel=`relpath $avc_root_abs $workspace`
            set -- "$paths"
            trampoline $subaction $workspace_rel "$@"
        done
    }
}

readonly overall_status_FORMAT="%- 40s %3s %-30s %12s %12s %4s %4s"
readonly overall_staus_DATE_FORMAT="%F"

overall_status_line()
{
    type=`workspace_type $1` 
    if [ -n "$type" ]
    then 
        size=`directory_size $1`
        scm_unknown=`unknown_files $1`
        scm_modified=`modified_elements $1`
        scm_content_tag=`content_tag $1`
        latest_modified=`latest_modified_file $1`
        
        age=`date -r $latest_modified +$overall_staus_DATE_FORMAT`
        printf "$overall_status_FORMAT\n" "$1" "$type" "$scm_content_tag" "$size" "$age" "$scm_modified" "$scm_unknown"
    fi
}

overall_status()
{
    ensure_avc_workspace_variables_setup
    
    local chunks="$*"
    if [ -z "$chunks" ] ; then
        chunks="`chunks_all $avc_root_specfile`" 
    fi
    
    # from now, we operate in avc_root
    cd "$avc_root_abs"
     
    QUIET=1
    printf "$overall_status_FORMAT\n" directory scm branch/tag size age mod unkn
    echo  "---------------------------------------------------------------------------------------------------------------"
    
    for chunk in $chunks ; do
        overall_status_line "$chunk"
    done
}

chunks_all()
        # chunks_all FILE
        #   get names of all objects
{
    local specfile="$1"
    awk '
        /^#/ {
                next;
        }
        /^([^ \t]+)[ \t]+/ {
            if( $1 != "*" ) {
                print $1;
            }
        }
        ' $specfile | sort -u
}

chunk_prop()
        # chunk_prop FILE CHUNK PROP_NAME
        #   get value of PROP_NAME of CHUNK from
        #   FILE
{
    local specfile="$1"
    local chunk="$2"
    local prop="$3"
    awk -v chunk="$chunk" '
        /^#/ {
            next;
        }
        /^([^ \t]+)[ \t]+'${prop}'[ \t]+/ {
            if( ! found ) {
                if( $1 == "*" ) {
                    value=$3
                    sub(/\*/,chunk,value)
                    printf("%s", value);
                    found=1
                    exit 0
                } else
                if( $1 == chunk ) { 
                    printf("%s", $3);
                    found=1
                    exit 0
                }
            }
        }
        END {
            if( !found)
                exit 1
        }
    ' $specfile
    r=$?
    return $r
}

chunk_prop_all()
        # chunk_prop FILE CHUNK PROP_NAME
        #   get value of PROP_NAME of CHUNK from
        #   FILE
{
    local specfile="$1"
    local chunk="$2"
    local prop="$3"
    awk -v chunk="$chunk" '
        /^#/ {
            next;
        }
        /^([^ \t]+)[ \t]+'${prop}'[ \t]+/ {
            if( $1 == "*" ) {
                value=$3
                sub(/\*/,chunk,value)
                
                if( found ) printf(" ");
                printf("%s", value);
                found=1
               
            } else
            if( $1 == chunk || $1 == "*" ) {
                if( found ) printf(" ");
                printf("%s", $3);
                found=1
            }
        }
        END {
            if( !found)
            exit 1
        }
    ' $specfile
    r=$?
    return $r
}
checkout()
{
    #set -x
    local specfile="$1"
    avc_root_specfile="$(abspath $specfile)"
    local target_folder="$2"
    shift
    shift
    
    local chunks="$*"
    if [ -z "$chunks" ] ; then
        chunks="$(chunks_all $specfile)" 
    fi
    if [ -d $target_folder ] ; then
        local root_folder_exists=1
    fi
    mkdir -p $target_folder
    cd $target_folder
    for chunk in $chunks ; do
        local chunk_url="$(chunk_prop $avc_root_specfile $chunk url)"
        local chunk_refs="$(chunk_prop_all $avc_root_specfile $chunk ref)"
        echo -e "avc: checking out: $chunk\t$chunk_refs\t($chunk_url)" >&2
        
        if [ ! -d "$chunk" -o "$chunk" == "." ] ; then
            checkout_url "$chunk" "$chunk_url" "$chunk_refs"
        else
            update_url "$chunk" "$chunk_url" "$chunk_refs"
        fi
    done
    cp "$avc_root_specfile" "$avc_root_specfile_name"
}

update()
{
    ensure_avc_workspace_variables_setup
    local specfile="${force_config_spec-$avc_root_specfile}"
    
    local chunks="$*"
    if [ -z "$chunks" ] ; then
        chunks="`chunks_all $specfile`" 
    fi
    
    # from now, we operate in avc_root
    cd "$avc_root_abs"
    for chunk in $chunks ; do
        local chunk_url="$(chunk_prop $specfile $chunk url)"
        local chunk_refs="$(chunk_prop_all $specfile $chunk ref)"
        echo -e "avc: updating $chunk\t$chunk_refs\t($chunk_url)" >&2
        
        update_url "$chunk" "$chunk_url" "$chunk_refs"
    done
    if ! diff -q "$specfile" $avc_root_specfile ; then
        cp "$specfile" $avc_root_specfile
    fi
}

for_each_chunk()
{
    ensure_avc_workspace_variables_setup
    local specfile="${force_config_spec-$avc_root_specfile}"
    
    # from now, we operate in avc_root
    cd "$avc_root_abs"
    
    for chunk in `chunks_all $specfile` ; do
        run_with_prefix "$chunk: " run_in $chunk "$@"
    done
}

for_each_chunk2()
{
    ensure_avc_workspace_variables_setup
    
    local specfile="${force_config_spec-$avc_root_specfile}"
    local chunks=""
    while true ; do
        if [ "$1" = "--" ] ; then
            shift
            break
        else
            chunks="$chunks $1"
            shift
        fi
    done
    
    if [ -z "$chunks" ] ; then
        chunks="`chunks_all $specfile`" 
    fi
    
    # from now, we operate in avc_root
    cd "$avc_root_abs"
    
    for chunk in $chunks ; do
        run_with_prefix "$chunk: " run_in $chunk "$@"
    done
}

usage()
{
    local idx="${#BASH_SOURCE[*]}"
    local source="${BASH_SOURCE[$idx-1]]}"
    egrep '^##( |$)' $source | cut -c4- >&2
}

PNAME=`basename $0`

#set -x

while [ -n "$1" ] ; do
    if   [ "$1" = "-h" -o "$1" = "--help" ]; then
        usage
        exit 0
    elif [ "$1" = "-n" -o "$1" = "--dry-run" ] ; then
        DRY_RUN=1
        shift
    elif [ "$1" = "-q" -o "$1" = "--quiet" ] ; then
        QUIET=1
        shift
    elif [ "$1" = "-m" -o "$1" = "--message" ] ; then
        if [ -z "$2" ] ; then
            echo "avc: value needed for -m/--message" >&2
            exit 1
        fi
        commit_message="$2"
        shift
        shift
    elif [ "$1" = "-c" -o "$1" = "--config-spec" ] ; then
        if [ -z "$2" ] ; then
            echo "avc: value needed for -c/--config-spec" >&2
            exit 1
        fi
        force_config_spec="$2"
        shift
        shift
    elif [ "$1" = "-f" -o "$1" = "--fetch" -o "$1" = "--pull" ] ; then
        enable_fetch_while_update=1
        shift
    elif [ "$1" = '--' ] ; then
        shift
        break
    else
        if [ -z "$action" ] ; then
            action="$1"
            shift
        else
            break
        fi
    fi
done

if [ -z "$action" ] ; then
    echo "avc: action not specified" >&2
    exit 1
fi

case "$action" in
    help)
        usage
        ;;
    checkout)
        # $1 - ref
        # $1 - target_folder
        if [ -z "$*" ] ; then
            echo "avc: checkout requires specfile and folder" >&2
            exit 1
        fi
        checkout "$1" "$2"
        ;;
    up|update)
        # $@ - chunks | default all
        update "$@"
        ;;
    add)
        if [ -z "$*" ] ; then
            echo "avc: add requires paths" >&2
            exit 1
        fi
        dispatch_to_workspaces add "$@"
        ;;
    rm|remove)
        if [ -z "$*" ] ; then
            echo "avc: rm requires paths" >&2
            exit 1
        fi
        dispatch_to_workspaces remove "$@"
        ;;
    ignore)
        if [ -z "$*" ] ; then
            echo "avc: ignore requires paths" >&2
            exit 1
        fi
        dispatch_to_workspaces ignore_file "$@"
        ;;

    ci|commit|checkin)
        dispatch_to_workspaces commit "$@"
        ;;

    diff|di)
        dispatch_to_workspaces workspace_diff "$@"
        ;;
    push)
        dispatch_to_workspaces push "$@"
        ;;
    status)
        dispatch_to_workspaces status "$@"
        ;;
    unknown)
        dispatch_to_workspaces status "$@" | awk '/\?/ {print $2}'
        ;;
    autoinit)
        autoinit
        ;;
    each)
        #QUIET=1
        for_each_chunk "$@"
        ;;
    peach)
        for_each_chunk2 "$@"
        ;;
    overall_status)
        overall_status "$@"
        ;;
        
    *)
        if [ -n "$INTRO" ] ; then
            $action "$@"
            exit $?
        else
            echo "avc: invalid action '$action'" >&2
            usage
            exit 1
        fi
        ;;        
esac

# jedit: :indent=4:tabSize=8:mode=shellscript:

